// Scalable vanilla bloom
// Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
//
// Parameters:
//
//   sampler2D HDRSampler;
//   float4 TexelSize;
//   float4 globalScreenSize;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   globalScreenSize   c44      1
//   TexelSize          c66      1
//   HDRSampler         s0       1
//

    ps_3_0
    def c0, 1, 0, 0, 0							// 1, 0 for horizontal & 0, 1 for vertical
	def c1, 0.1724137931034483, 0.0917431192661, 0.0625, 0 	// reciprocal sums of all weights
	def c2, 0.01724137931034483, 0.004587155963305, 0.0020833333333333, 0	// the values from c1 divided by 10, 20 and 30 respectively
	def c3, 1, 0.5, 0.333333, 0					// rescale multiplicators
	def c4, 720, 1440, 0.0013889, 0				// resolution constants
	defi i0, 3, 0, 0, 0
	defi i1, 6, 0, 0, 0
	defi i2, 9, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
	
	texld r0, v0, s0							// center point
	mov r1, c0.w								// sample sum = 0
	mov r2.w, c0.w								// set w to 0 for texldl
	mov r3, c4									// copy resolution params for scaling and comparison
	mov r4.xy, c0.xy							// copy offset
	mul r4.xy, r4.xy, c44.y						// multiply by screen height
	mul r4.xy, r4.xy, r3.z						// divide by 720
	
	// Uses different sample counts depending on the resolution to improve performance
	
	if_le c44.y, r3.x	// 720p					// if(screen_height <= 720)
	
		// mul r4.xy, r4.xy, c3.x				// rescale offset
		mov r5.xy, r4.xy						// copy rescaled offset for sum
		mov r6.x, c1.x							// copy center weight
		
		rep i0
			add r6.x, r6.x, -c2.x				// calculate iteration weight
		
			mad r2.xy, c66, -r4.xy, v0			// calculate texcoord
			texldl r2.xyz, r2, s0				// sample texture
			add r2.xyz, r2, -r0 				// subtract center
			cmp r2.xyz, r2, r2, c0.w			// set negatives to 0
			mul r2.xyz, r2, r6.x				// multiply by weight
			add r1, r1, r2.xyz					// sum
			
			mad r2.xy, c66, r4.xy, v0
			texldl r2.xyz, r2, s0
			add r2.xyz, r2, -r0
			cmp r2.xyz, r2, r2, c0.w
			mul r2.xyz, r2, r6.x
			add r1, r1, r2.xyz
			
			add r4.xy, r4.xy, r5.xy				// offset++
		endrep
		
	else
	if_le c44.y, r3.y	// 1440p
	
		mul r4.xy, r4.xy, c3.y
		mov r5.xy, r4.xy
		mov r6.x, c1.y
		
		rep i1
			add r6.x, r6.x, -c2.y
		
			mad r2.xy, c66, -r4.xy, v0
			texldl r2.xyz, r2, s0
			add r2.xyz, r2, -r0
			cmp r2.xyz, r2, r2, c0.w
			mul r2.xyz, r2, r6.x
			add r1, r1, r2.xyz
			
			mad r2.xy, c66, r4.xy, v0
			texldl r2.xyz, r2, s0
			add r2.xyz, r2, -r0
			cmp r2.xyz, r2, r2, c0.w
			mul r2.xyz, r2, r6.x
			add r1, r1, r2.xyz
			
			add r4.xy, r4.xy, r5.xy
		endrep
		
	else				// 2160p
	
		mul r4.xy, r4.xy, c3.z
		mov r5.xy, r4.xy
		mov r6.x, c1.z
		
		rep i2
			add r6.x, r6.x, -c2.z
		
			mad r2.xy, c66, -r4.xy, v0
			texldl r2.xyz, r2, s0
			add r2.xyz, r2, -r0
			cmp r2.xyz, r2, r2, c0.w
			mul r2.xyz, r2, r6.x
			add r1, r1, r2.xyz
			
			mad r2.xy, c66, r4.xy, v0
			texldl r2.xyz, r2, s0
			add r2.xyz, r2, -r0
			cmp r2.xyz, r2, r2, c0.w
			mul r2.xyz, r2, r6.x
			add r1, r1, r2.xyz
			
			add r4.xy, r4.xy, r5.xy
		endrep
	endif
	endif

    add oC0.xyz, r1, r0							// offset samples + center
    mov oC0.w, c3.x

// approximately 40 instruction slots used (7 texture, 33 arithmetic)
 